sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
ggplot(sums, aes(x = x)) +
geom_bar()
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
sums <- colSums(elem)
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
ggplot(sums_bob_ross, aes(x = x)) +
geom_bar()
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
sums <- colSums(elem)
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
ggplot(sums_bob_ross, aes(x = sums)) +
geom_bar()
filter(sums_bob_ross, sums > 5)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5)
ggplot(sums_bob_ross, aes(x = sums)) +
geom_bar()
filter(sums_bob_ross, sums > 5) %>%
ggplot(sums_bob_ross, aes(x = sums)) +
geom_bar()
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x = sums)) +
geom_bar()
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(y = sums)) +
geom_bar()
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x = sums)) +
geom_bar()
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x = count)) +
geom_bar()
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x = sums)) +
geom_bar()
view(elements_by_episode)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x = sums)) +
geom_bar()
View(sums_bob_ross)
sums_bob_ross <- t(sums_bob_ross)
View(sums_bob_ross)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
View(sums_bob_ross)
View(sums_bob_ross)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
View(sums_bob_ross)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
filter(sums_bob_ross, sums > 5) %>%
ggplot(aes(x= sums)) +
geom_bar()
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
select(sums_bob_ross, sums > 5) %>%
ggplot(aes(x= sums)) +
geom_bar()
View(sums_bob_ross)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
select(sums_bob_ross, sums >= 5) %>%
ggplot(aes(x= sums)) +
geom_bar()
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
select(sums_bob_ross, sums >= 5)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
!select(sums_bob_ross, sums >= 5)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
!select(sums_bob_ross, sums > 5)
View(sums_bob_ross)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
#plotting
ggplot(sums_bob_ross, aes(x = sums)) +
geom(bar)
#turning the elements_by_episode df into a tibble so that it can be processed by colsums() (Emy's work)
elem<- tibble::as_tibble(elements_by_episode)[,-2][,-1]
#making the tibble into a vector
#taking the sums of all columns in the tibble and turning them into values of the new 'x' var #each column from the original data frame is now a row with one value for 'x'
sums <- colSums(elem)
#converting the vector back into a dataframe
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
#filtering out rows with a 'sums' value less than 5 (this is what the author of the original article did)
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
#plotting
ggplot(sums_bob_ross, aes(x = sums)) +
geom_bar()
# Turning the elements_by_episode df into a tibble
elem <- tibble::as_tibble(elements_by_episode)[,-2][,-1]
# Taking the sums of all columns in the tibble
sums <- colSums(elem)
# Creating a data frame from the sums
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
names(sums_bob_ross) <- "sums"  # Naming the column
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
# Plotting
ggplot(sums_bob_ross, aes(x = factor(1), y = sums)) +
geom_bar(stat = "identity")
elem <- tibble::as_tibble(elements_by_episode)[,-2][,-1]
# Taking the sums of all columns in the tibble
sums <- colSums(elem)
# Creating a data frame from the sums
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
names(sums_bob_ross) <- "sums"  # Naming the column
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
View(sums_bob_ross)
sums_bob_ross <- as.data.frame(t(sums_bob_ross))
ggplot(sums_bob_ross, aes(x = sums)) + geom_bar()
ggplot(sums_bob_ross, aes(x = .)) + geom_bar()
View(sums_bob_ross)
ggplot(sums_bob_ross, aes(x = sums)) + geom_bar()
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
elem <- tibble::as_tibble(elements_by_episode)[,-2][,-1]
# Taking the sums of all columns in the tibble
sums <- colSums(elem)
# Creating a data frame from the sums
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
names(sums_bob_ross) <- "sums"  # Naming the column
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5)
View(sums_bob_ross)
ggplot(sums_bob_ross, aes(x = sums)) + geom_bar()
knitr::include_graphics("C:/Users/agjjo/Zotero/storage/M3RMZ9LG/538_bob_ross_data.pdf")
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5) %>% mutate(prop = sums / 381)
View(sums_bob_ross)
?round
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5) %>% mutate(prop = (sums / 381)*100)
View(sums_bob_ross)
ggplot(sums_bob_ross, aes(x = prop)) + geom_bar()
ggplot(t(sums_bob_ross), aes(x = prop)) + geom_bar()
ggplot(t(as.matrix(sums_bob_ross)), aes(x = prop)) + geom_bar()
ggplot(as.data.frame(t(as.matrix(sums_bob_ross)), aes(x = prop)) + geom_bar()
elem <- tibble::as_tibble(elements_by_episode)[,-2][,-1]
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
# I got you started!
# The first time you want to install the dsbox package; then you can comment it out.
# If you have not installed the devtools package, you will need to do so first
#install.packages("devtools")
#library(devtools)
#install.packages("tidyverse")
#install.packages("viridis")
#install.packages("lintr")
#install.packages("datapasta")
#install.packages("tidytuesdayR")
#devtools::install_github("tidyverse/dsbox")
library(dsbox)
#install.packages("styler")
library(styler)
library(tidyverse)
library(viridis)
#data(accidents)
library(magrittr)
#data(mpg)
library(lintr)
data("elements-by-episode.df")
library(tidytuesdayR)
data("rent")
#view(elements_by_episode.df)
#view(mpg)
#?mpg
#?accidents
#view(accidents)
knitr::include_graphics("../img/edi-accidents-1.png")
#mutating weekend variable
accidents <- mutate(accidents, weekend = ifelse(day_of_week %in% c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday"), "weekday", "weekend"))
#wrangling
slight_accidents <- accidents %>%
filter(severity == "Slight")
serious_accidents <- accidents %>%
filter(severity == "Serious")
fatal_accidents <- accidents %>%
filter(severity == "Fatal")
#plotting
accident_plot <- ggplot(data = slight_accidents, aes(x = time)
) +
geom_density(fill = "yellow", alpha = 0.3
) +
geom_density(data = serious_accidents, fill = "blue", alpha = 0.3
) +
geom_density(data = fatal_accidents, fill = "purple", alpha = 0.3
) +
xlab("Time of day"
) +
facet_wrap(~weekend, nrow = 2
)
accident_plot
#could not figure out how to add a legend
#wrangling
#figure out how to recode urban_rural to list "urban" or "rural" rather than 1 2 and apparently 3???
#accidents <- accidents %>%
#mutate(accidents, urban_rural = ifelse(urban_rural = ifelse(urban_rural = 1) 'urban', 'rural'))
accidents_police <- accidents %>%
filter(police == "Yes")
accidents_no_police <- accidents %>%
filter(police == "No")
#plotting
a <- ggplot(data = accidents_police, aes(x = speed_limit)) +
geom_density(fill = "red", alpha = 0.4
) +
geom_density(data = accidents_no_police, fill = "blue", alpha = 0.4
) +
facet_wrap(~urban_rural, nrow = 2)
a
#Note: the density curve for accidents across speed limits is real interesting/funk and bears some investigation
#Pros:
#allows us to see if there is a trend relating speed limit to accident density (there is, a weird one)
#allows us to see if  there is a difference in police responsiveness relating to speed limit
#compares these trends across urban and rural environments
#cons
#hard to glean precise understanding of trends, you i=only really see the shape
#doesn't control for conditions or vehicle count, which feel relavent
accidents <- accidents %>%
filter(vehicles < 6)
ggplot(data = accidents, aes(x = vehicles, fill = police)) +
geom_bar()
#how do I choose what color is associated with what??
#pros
#both b & c give a sense of the relative number of crashes across vehicle count
#shows trend of police response relative to vehicles involved
#cons
#would need to make the bars equally sized to understand the true relative rates
accidents <- accidents %>%
filter(vehicles < 6)
# Convert urban_rural to factor
#ChatGPT explained this, I was already trying to find a way using mutate() to reclass urban_rural as categorical with only two categories
accidents$urban_rural <- factor(accidents$urban_rural)
ggplot(data = accidents, aes(x = vehicles, fill = urban_rural)) +
geom_bar()
#still don't know what the third category in urban_rural is
#pros
#both b & c give a sense of the relative number of crashes across vehicle count
#shows trend of urban/rural environment relative to vehicles involved
#cons
#would need to make the bars equally sized to understand the true relative rates
accidents$urban_rural <- factor(accidents$urban_rural)
ggplot(data = accidents, aes(x = urban_rural, fill = police)) +
geom_bar()
#pros
#both b & c give a sense of the relative number of crashes across vehicle count
#shows trend of police response relative to urban/rural environment
#cons
#would need to make the bars equally sized to understand the true relative rates
#I'd like to do this with one of these but I'm not sure which
# Creating the dataframe with the correct dimensions
animal_data <- data.frame(
theanimalsweightisthisnumber = c(runif(3), NA),
y = c("cat", "mouse", "dog", "rat")
)
# Mutating the dataframe to add 'animal_weight' column
animal_data <- animal_data %>%
mutate(animal_weight = theanimalsweightisthisnumber) %>%
select(-theanimalsweightisthisnumber)  # Remove the column
view(animal_data)
# Calculating median, mean, and variance
median_val <- median(animal_data$animal_weight, na.rm = TRUE)
mean_val <- mean(animal_data$animal_weight, na.rm = TRUE)
variance_val <- var(animal_data$animal_weight, na.rm = TRUE)
# Printing the results
cat("Median:", median_val, "\n")
cat("Mean:", mean_val, "\n")
cat("Variance:", variance_val, "\n")
# Plotting the data
ggplot(animal_data, aes(y = animal_weight, x = y)) +
geom_col() +
scale_y_continuous()
thing.132232=data.frame(theanimalsweightisthisnumber=c(runif(3),NA),y=c("cat","mouse","dog","rat"))
median(thing.132232$theanimalsweightisthisnumber, TRUE);mean(thing.132232$theanimalsweightisthisnumber, 0 , TRUE); var(thing.132232$theanimalsweightisthisnumber, NULL, TRUE)
ggplot(thing.132232, aes(y=theanimalsweightisthisnumber,x=y))+geom_col()+scale_y_continuous()
# Turning the elements_by_episode df into a tibble
elem <- tibble::as_tibble(elements_by_episode)[,-2][,-1]
# Taking the sums of all columns in the tibble
sums <- colSums(elem)
# Creating a data frame from the sums
sums_bob_ross <- as.data.frame(sums, row.names = NULL, optional = FALSE)
names(sums_bob_ross) <- "sums"  # Naming the column
# Filtering out rows with a 'sums' value less than 5
sums_bob_ross <- filter(sums_bob_ross, sums > 5) %>% mutate(prop = (sums / 381)*100)
ggplot(as.data.frame(t(as.matrix(sums_bob_ross)), aes(x = prop)) + geom_bar()
# Plotting
ggplot(sums_bob_ross, aes(x = factor(1), y = sums)) +
ggplot(as.data.frame(t(as.matrix(sums_bob_ross)), aes(x = prop)) + geom_bar()
ggplot(as.data.frame(t(as.matrix(sums_bob_ross)), aes(x = prop)) + geom_bar()
ggplot(data = as.data.frame(t(as.matrix(sums_bob_ross))), aes(x = prop)) + geom_bar()
as.data.frame(t(as.matrix(sums_bob_ross))
as.data.frame(t(as.matrix(sums_bob_ross)))
df_br <- as.data.frame(t(as.matrix(sums_bob_ross)))
View(df_br)
?ggplot
?geom_bar
ggplot(data = df_br, x = prop) + geom_bar()
ggplot(data = df_br, x = prop) + geom_bar()
ggplot(data = df_br, x = prop, y = BARN) + geom_bar()
ggplot(data = df_br, x = prop) + geom_bar()
ggplot(data = df_br, x = BARN) + geom_bar()
ggplot(data = df_br, y = BARN) + geom_bar()
ggplot(data = df_br, y = sums) + geom_bar()
ggplot(data = sums_bob_ross, y = sums) + geom_bar()
ggplot(data = df_br, y = sums) + geom_col()
ggplot(data = df_br, x = sums) + geom_col()
ggplot(data = df_br, aes(x= prop)) + geom_col()
ggplot(data = df_br, aes(x= sums)) + geom_col()
ggplot(data = sums_bob_ross, aes(x= sums)) + geom_col()
ggplot(data = sums_bob_ross, aes(y= sums)) + geom_col()
# Get the Data
# Read in with tidytuesdayR package
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest
library(tidytuesdayR)
tuesdata <- tidytuesdayR::tt_load('2022-07-05') # this could take a minute
rent <- tuesdata$rent
view(rent)
view(tuesdata)
data(tuesdata)
view(tuesdata)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Creating a function to delete rows with a certain minimum number of NA's
delete.na <- function(DF, n = 0) {
DF[rowSums(is.na(DF)) <= n, ]
}
# Assuming 'covid_survey' is your data frame
covid_cleaned <- delete.na(covid_survey, 12)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(ggplot2)
library(tidytuesdayR)
library(readr)
library(datapasta)
library(dplyr)
#using the libraries
covid_survey <- read_csv("C:/Users/agjjo/OneDrive/Documents/GitHub/math241/labs/lab04/data/covid-survey.csv")
#View(covid_survey)
dim(covid_survey)
# Creating a function to delete rows with a certain minimum number of NA's
delete.na <- function(DF, n = 0) {
DF[rowSums(is.na(DF)) <= n, ]
}
# Assuming 'covid_survey' is your data frame
covid_cleaned <- delete.na(covid_survey, 12)
# Relabeling survey responses, this doesn't work but U get the idea
covid_cleaned <- covid_cleaned %>%
mutate(exp_race = case_when(
exp_race == 1 ~ "American Indian / Alaskan native",
exp_race == 2 ~ "Asian",
exp_race == 3 ~ "Black / African American",
exp_race == 4 ~ "Native Hawaiian / Other Pacific Islander",
exp_race == 5 ~ "White",
TRUE ~ as.character(exp_race)  # Handling other cases
))
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(ggplot2)
library(tidytuesdayR)
library(readr)
library(datapasta)
library(dplyr)
#using the libraries
covid_survey <- read_csv("C:/Users/agjjo/OneDrive/Documents/GitHub/math241/labs/lab04/data/covid-survey.csv")
#View(covid_survey)
dim(covid_survey)
# Creating a function to delete rows with a certain minimum number of NA's
delete.na <- function(DF, n = 0) {
DF[rowSums(is.na(DF)) <= n, ]
}
# Assuming 'covid_survey' is your data frame
covid_cleaned <- delete.na(covid_survey, 12)
# Relabeling survey responses, this doesn't work but U get the idea
covid_cleaned <- covid_cleaned %>%
mutate(exp_race = case_when(
exp_race == 1 ~ "American Indian / Alaskan native",
exp_race == 2 ~ "Asian",
exp_race == 3 ~ "Black / African American",
exp_race == 4 ~ "Native Hawaiian / Other Pacific Islander",
exp_race == 5 ~ "White",
TRUE ~ as.character(exp_race)  # Handling other cases
))
# Put all necessary libraries here
library(tidyverse)
library(ggplot2)
library(tidytuesdayR)
library(readr)
library(datapasta)
library(dplyr)
#using the libraries
covid_survey <- read_csv("C:/Users/agjjo/OneDrive/Documents/GitHub/math241/labs/lab04/data/covid-survey.csv")
View(covid_survey)
dim(covid_survey)
# Put all necessary libraries here
library(tidyverse)
library(ggplot2)
library(tidytuesdayR)
library(readr)
library(datapasta)
library(dplyr)
tinytex::install_tinytex()
#using the libraries
covid_survey <- read_csv("C:/Users/agjjo/OneDrive/Documents/GitHub/math241/labs/lab04/data/covid-survey.csv")
#View(covid_survey)
dim(covid_survey)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
library(knitr)
library(knitr)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rvest)
library(httr)
library(rnoaa)
init::renv
renv::init()
# Do not modify this chunk.
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE)
# Put all necessary libraries here
library(tidyverse)
library(rvest)
library(httr)
library(rnoaa)
renv::status
